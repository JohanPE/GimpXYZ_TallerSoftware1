# -*- coding: utf-8 -*-
"""TRABAJO_FINAL_23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d4205wBiMcXcQtJsbg5jGP6N8K7BbeiP
"""

import math
def distancia(point1, point2):
    x1, y1 = point1[0], point1[1]
    x2, y2 = point2[0], point2[1]
    d = (((y2-y1)**2)+((x2-x1)**2))**(0.5)
    return d
def printMatrix(matrix, n, m):
    for row in range(n):
        for col in range(m):
            print(matrix[row][col], end="  ")
        print()


def drawCuadrado(matriz, point1, point2):
    x1, y1 = point1[0], point1[1]
    x2, y2 = point2[0], point2[1]

    if x2 > x1 and y2 > y1:
        pMax_x = x2
        pMax_y = y2
        pMin_x = x1
        pMin_y = y1
    elif x2 > x1 and y1 > y2:
        pMax_x = x2
        pMax_y = y1
        pMin_x = x1
        pMin_y = y2
    elif x1 > x2 and y2 > y1:
        pMax_x = x1
        pMax_y = y2
        pMin_x = x2
        pMin_y = y1
    elif x1 > x2 and y1 > y2:
        pMax_x = x1
        pMax_y = y1
        pMin_x = x2
        pMin_y = y2
    else:
        print("error")

    matriz[pMin_y - 1][pMin_x] = " "
    matriz[pMax_y - 1][pMax_x] = " "
    matriz[pMin_y - 1][pMax_x] = " "
    matriz[pMax_y - 1][pMin_x] = " "

    matriz[pMax_y - 1][pMax_x] = "*"
    matriz[pMin_y - 1][pMin_x] = "*"
    matriz[pMin_y - 1][pMax_x] = "*"
    matriz[pMax_y - 1][pMin_x] = "*"

    n1 = pMax_x - pMin_x
    for i in range(n1):
        matriz[pMin_y - 1][pMin_x + i] = "*"
        matriz[pMax_y - 1][pMax_x - i] = "*"

    n2 = pMax_y - pMin_y
    for j in range(n2):
        matriz[pMax_y - j - 1][pMax_x] = "*"
        matriz[pMin_y + j - 1][pMin_x] = "*"

    return matriz


def deleteCuadrado(matriz, point1, point2):
    x1, y1 = point1[0], point1[1]
    x2, y2 = point2[0], point2[1]

    if x2 > x1 and y2 > y1:
        pMax_x = x2
        pMax_y = y2
        pMin_x = x1
        pMin_y = y1
    elif x2 > x1 and y1 > y2:
        pMax_x = x2
        pMax_y = y1
        pMin_x = x1
        pMin_y = y2
    elif x1 > x2 and y2 > y1:
        pMax_x = x1
        pMax_y = y2
        pMin_x = x2
        pMin_y = y1
    elif x1 > x2 and y1 > y2:
        pMax_x = x1
        pMax_y = y1
        pMin_x = x2
        pMin_y = y2
    else:
        print("error")

    matriz[pMin_y - 1][pMin_x] = " "
    matriz[pMax_y - 1][pMax_x] = " "
    matriz[pMin_y - 1][pMax_x] = " "
    matriz[pMax_y - 1][pMin_x] = " "

    matriz[pMax_y - 1][pMax_x] = " "
    matriz[pMin_y - 1][pMin_x] = " "
    matriz[pMin_y - 1][pMax_x] = " "
    matriz[pMax_y - 1][pMin_x] = " "

    n1 = pMax_x - pMin_x
    for i in range(n1):
        matriz[pMin_y - 1][pMin_x + i] = " "
        matriz[pMax_y - 1][pMax_x - i] = " "

    n2 = pMax_y - pMin_y
    for j in range(n2):
        matriz[pMax_y - j - 1][pMax_x] = " "
        matriz[pMin_y + j - 1][pMin_x] = " "

    return matriz


def tamanoCuadrado(matriz, scale, point1, point2):
    x1, y1 = point1[0], point1[1] - 1
    x2, y2 = point2[0], point2[1] - 1
    scale = scale+1

    if x2 > x1 and y2 > y1:
        pMax_x = x2
        pMax_y = y2
        pMin_x = x1
        pMin_y = y1
    elif x2 > x1 and y1 > y2:
        pMax_x = x2
        pMax_y = y1
        pMin_x = x1
        pMin_y = y2
    elif x1 > x2 and y2 > y1:
        pMax_x = x1
        pMax_y = y2
        pMin_x = x2
        pMin_y = y1
    elif x1 > x2 and y1 > y2:
        pMax_x = x1
        pMax_y = y1
        pMin_x = x2
        pMin_y = y2
    else:
        print("error")

    matriz[pMin_y][pMin_x] = " "
    matriz[pMax_y][pMax_x] = " "
    matriz[pMin_y][pMax_x] = " "
    matriz[pMax_y][pMin_x] = " "

    pMax_x = pMax_x + scale - 1
    pMax_y = pMax_y + scale - 1
    matriz[pMax_y][pMax_x] = "*"

    pMin_x = pMin_x - (scale - 1)
    pMin_y = pMin_y - (scale - 1)
    matriz[pMin_y][pMin_x] = "*"

    matriz[pMin_y][pMax_x] = "*"
    matriz[pMax_y][pMin_x] = "*"
    n1 = pMax_x - pMin_x
    for i in range(n1):
        matriz[pMin_y][pMin_x + i] = "*"
        matriz[pMax_y][pMax_x - i] = "*"

    n2 = pMax_y - pMin_y
    for j in range(n2):
        matriz[pMax_y - j][pMax_x] = "*"
        matriz[pMin_y + j][pMin_x] = "*"

    return matriz


def rotarCuadrado(matriz, grados, point1, point2):
    x1, y1 = point1[0], point1[1]
    x2, y2 = point2[0], point2[1]

    if x2 > x1 and y2 > y1:
        pMax_x = x2
        pMax_y = y2
        pMin_x = x1
        pMin_y = y1
    elif x2 > x1 and y1 > y2:
        pMax_x = x2
        pMax_y = y1
        pMin_x = x1
        pMin_y = y2
    elif x1 > x2 and y2 > y1:
        pMax_x = x1
        pMax_y = y2
        pMin_x = x2
        pMin_y = y1
    elif x1 > x2 and y1 > y2:
        pMax_x = x1
        pMax_y = y1
        pMin_x = x2
        pMin_y = y2
    else:
        print("error")

    # matriz[pMin_y - 1][pMin_x] = " "
    # matriz[pMax_y - 1][pMax_x] = " "

    ancho = abs(pMax_x - pMin_x)
    altura = abs(pMax_y - pMin_y)

    n = abs(ancho - altura)
    if n % 2 == 0:
        n2 = [n // 2, n // 2]
    else:
        n2 = [n // 2 + 1, n // 2]

    if altura > ancho:
        nmin_x = pMin_x
        nmin_y = pMin_y + n2[0]
        nmax_x = pMax_x
        nmax_y = pMax_y - n2[1]

        nmin_x90 = nmin_x - n2[0]
        nmin_y90 = nmin_y
        nmax_x90 = nmax_x + n2[1]
        nmax_y90 = nmax_y

        nmin_x180 = nmin_x
        nmin_y180 = nmin_y - n2[1]
        nmax_x180 = nmax_x
        nmax_y180 = nmax_y + n2[0]

        nmin_x270 = nmin_x - n2[1]
        nmin_y270 = nmin_y
        nmax_x270 = nmax_x + n2[0]
        nmax_y270 = nmax_y

        nmin_x360 = pMin_x
        nmin_y360 = pMin_y
        nmax_x360 = pMax_x
        nmax_y360 = pMax_y

        if grados == 90:
            drawCuadrado(matriz, [nmin_x90, nmin_y90], [nmax_x90, nmax_y90])
            """nlista = [nmin_x90, nmin_y90, nmax_x90, nmax_y90]
            showTotal[valor][1] = nlista"""
        elif grados == 180:
            drawCuadrado(matriz, [nmin_x180, nmin_y180], [nmax_x180, nmax_y180])
            """nlista = [nmin_x180, nmin_y180, nmax_x180, nmax_y180]
            showTotal[valor][1] = nlista"""

        elif grados == 270:
            drawCuadrado(matriz, [nmin_x270, nmin_y270], [nmax_x270, nmax_y270])
            """nlista = [nmin_x270, nmin_y270, nmax_x270, nmax_y270]
            showTotal[valor][1] = nlista"""

        elif grados == 360:
            drawCuadrado(matriz, [nmin_x360, nmin_y360], [nmax_x360, nmax_y360])
            """nlista = [nmin_x360, nmin_y360, nmax_x360, nmax_y360]
            showTotal[valor][1] = nlista"""


    elif ancho > altura:
        nmin_x = pMin_x + n2[0]
        nmin_y = pMin_y
        nmax_x = pMax_x - n2[1]
        nmax_y = pMax_y

        nmin_x90 = nmin_x
        nmin_y90 = nmin_y - n2[1]
        nmax_x90 = nmax_x
        nmax_y90 = nmax_y + n2[0]

        nmin_x180 = nmin_x - n2[1]
        nmin_y180 = nmin_y
        nmax_x180 = nmax_x + n2[0]
        nmax_y180 = nmax_y

        nmin_x270 = nmin_x
        nmin_y270 = nmin_y - n2[0]
        nmax_x270 = nmax_x
        nmax_y270 = nmax_y + n2[1]

        nmin_x360 = pMin_x
        nmin_y360 = pMin_y
        nmax_x360 = pMax_x
        nmax_y360 = pMax_y

        if grados == 90:
            drawCuadrado(matriz, [nmin_x90, nmin_y90], [nmax_x90, nmax_y90])
            """nlista = [nmin_x90, nmin_y90, nmax_x90, nmax_y90]
            showTotal[valor][1] = nlista"""
        elif grados == 180:
            drawCuadrado(matriz, [nmin_x180, nmin_y180], [nmax_x180, nmax_y180])
            """nlista = [nmin_x180, nmin_y180, nmax_x180, nmax_y180]
            showTotal[valor][1] = nlista"""
        elif grados == 270:
            drawCuadrado(matriz, [nmin_x270, nmin_y270], [nmax_x270, nmax_y270])
            """nlista = [nmin_x270, nmin_y270, nmax_x270, nmax_y270]
            showTotal[valor][1] = nlista"""
        elif grados == 360:
            drawCuadrado(matriz, [nmin_x360, nmin_y360], [nmax_x360, nmax_y360])
            """nlista = [nmin_x360, nmin_y360, nmax_x360, nmax_y360]
            showTotal[valor][1] = nlista"""
    else:
        drawCuadrado(matriz, [pMin_x, pMin_y], [pMax_x, pMax_y])

    return matriz


def drawCircle(matriz, point, radio):
    x, y = point[0], point[1] - 1

    matriz[y][x] = "."
    matriz[y][x - radio] = "."
    matriz[y][x + radio] = "."
    matriz[y - radio][x] = "."
    matriz[y + radio][x] = "."

    matriz[y][x] = " "
    matriz[y][x - radio] = "*"  # izquierda
    matriz[y][x + radio] = "*"  # derecha
    matriz[y - radio][x] = "*"  # abajo
    matriz[y + radio][x] = "*"  # arriba

    if radio > 1:
        lRecta = math.floor(radio / 2)
        for j in range(lRecta + 1):
            matriz[y + j][x - radio] = "*"  # punto superior izquierda
            matriz[y - j][x - radio] = "*"  # punto inferior izquierda

            matriz[y + j][x + radio] = "*"  # punto superior derecha
            matriz[y - j][x + radio] = "*"  # punto inferior derecha

            matriz[y - radio][x + j] = "*"
            matriz[y - radio][x - j] = "*"

            matriz[y + radio][x + j] = "*"
            matriz[y + radio][x - j] = "*"

        for i in range(lRecta + 1):
            matriz[y + lRecta + i][x - radio + i] = "*"  # punto inferior izquierda
            matriz[y - lRecta - i][x - radio + i] = "*"  # punto superior izquierda

            matriz[y + lRecta + i][x + radio - i] = "*"  # punto inferior derecha
            matriz[y - lRecta - i][x + radio - i] = "*"  # punto superior derecha

    return matriz

def deleteCircle(matriz, point, radio):
    x, y = point[0], point[1] - 1

    matriz[y][x] = " "
    matriz[y][x - radio] = " "
    matriz[y][x + radio] = " "
    matriz[y - radio][x] = " "
    matriz[y + radio][x] = " "

    matriz[y][x] = " "
    matriz[y][x - radio] = " "  # izquierda
    matriz[y][x + radio] = " "  # derecha
    matriz[y - radio][x] = " "  # abajo
    matriz[y + radio][x] = " "  # arriba

    if radio > 1:
        lRecta = math.floor(radio / 2)
        for j in range(lRecta + 1):
            matriz[y + j][x - radio] = " "  # punto superior izquierda
            matriz[y - j][x - radio] = " "  # punto inferior izquierda

            matriz[y + j][x + radio] = " "  # punto superior derecha
            matriz[y - j][x + radio] = " "  # punto inferior derecha

            matriz[y - radio][x + j] = " "
            matriz[y - radio][x - j] = " "

            matriz[y + radio][x + j] = " "
            matriz[y + radio][x - j] = " "

        for i in range(lRecta + 1):
            matriz[y + lRecta + i][x - radio + i] = " "  # punto inferior izquierda
            matriz[y - lRecta - i][x - radio + i] = " "  # punto superior izquierda

            matriz[y + lRecta + i][x + radio - i] = " "  # punto inferior derecha
            matriz[y - lRecta - i][x + radio - i] = " "  # punto superior derecha

    return matriz

def drawLinea(matriz, point1, point2):
    x0, y0 = point1[0], point1[1] - 1
    x1, y1 = point2[0], point2[1] - 1

    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    if x0 > x1:
        sx = -1
    else:
        sx = 1
    if y0 > y1:
        sy = -1
    else:
        sy = 1

    diferencia = dx - dy

    while x0 != x1 or y0 != y1:
        matriz[y0][x0] = "*"
        po = 2 * diferencia
        if po > -dy:
            diferencia -= dy
            x0 += sx
        if po < dx:
            diferencia += dx
            y0 += sy

    matriz[y0][x0] = "*"
    return matriz

def deleteLinea(matriz, point1, point2):
    x0, y0 = point1[0], point1[1] - 1
    x1, y1 = point2[0], point2[1] - 1

    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    if x0 > x1:
        sx = -1
    else:
        sx = 1
    if y0 > y1:
        sy = -1
    else:
        sy = 1

    diferencia = dx - dy

    while x0 != x1 or y0 != y1:
        matriz[y0][x0] = " "
        po = 2 * diferencia
        if po > -dy:
            diferencia -= dy
            x0 += sx
        if po < dx:
            diferencia += dx
            y0 += sy

    matriz[y0][x0] = " "
    return matriz

def agrandarLinea(matriz, factor, point1, point2):
    xmin = min([point1[0], point2[0]])
    ymin = min([point1[1], point2[1]])
    minpoint = [xmin, ymin]
    xmax = max([point1[0], point2[0]])
    ymax = max([point1[1], point2[1]])
    maxpoint = [xmax, ymax]
    nminpoint = [xmin - factor, ymin - factor]
    nmaxpoint = [xmax + factor, ymax + factor]
    puntoSDerecho = [xmax + factor, ymin - factor]
    puntoIIzquierdo = [xmin - factor, ymax + factor]

    if point1[1] == point2[1]:
        nlista = [xmin - factor, ymin, xmax + factor, ymax]
        showTotal[valor][1] = nlista
        matrix_add = drawLinea(matriz, [xmin - factor, ymin], [xmax + factor, ymax])
        print(" ".join(li))
        printMatrix(matrix_add, 20, 22)
        print(" ".join(lf))
    elif point1[0] == point2[0]:
        nlista = [xmin, ymin - factor, xmax, ymax + factor]
        showTotal[valor][1] = nlista
        matrix_add = drawLinea(matriz, [xmin, ymin - factor], [xmax, ymax + factor])
        print(" ".join(li))
        printMatrix(matrix_add, 20, 22)
        print(" ".join(lf))
    elif minpoint == point1 or minpoint == point2:
        nlista = [xmin - factor, ymin - factor, xmax + factor, ymax + factor]
        showTotal[valor][1] = nlista
        matrix_add = drawLinea(matriz, nminpoint, nmaxpoint)
        print(" ".join(li))
        printMatrix(matrix_add, 20, 22)
        print(" ".join(lf))
    else:
        nlista = [xmin - factor, ymax + factor, xmax + factor, ymin - factor]
        showTotal[valor][1] = nlista
        matrix_add = drawLinea(matriz, puntoIIzquierdo, puntoSDerecho)
        print(" ".join(li))
        printMatrix(matrix_add, 20, 22)
        print(" ".join(lf))

    return matriz
def drawTriangulo(matriz, point1, point2, point3):
    matriz = drawLinea(matriz, point1, point2)
    matriz = drawLinea(matriz, point1, point3)
    matriz = drawLinea(matriz, point2, point3)

    return matriz
def agrandarTriangulo(matriz, factor, point1, point2, pointb):
    xmin = min([point1[0], point2[0]])
    ymin = min([point1[1], point2[1]])
    minpoint = [xmin, ymin]
    xmax = max([point1[0], point2[0]])
    ymax = max([point1[1], point2[1]])
    maxpoint = [xmax, ymax]
    nminpoint = [xmin - factor, ymin - factor]
    nmaxpoint = [xmax + factor, ymax + factor]
    puntoSDerecho = [xmax + factor, ymin - factor]
    puntoIIzquierdo = [xmin - factor, ymax + factor]

    if minpoint == point1 or minpoint == point2:
        if pointb[0]-factor == puntoIIzquierdo[0] and pointb[1]+factor==puntoIIzquierdo[1]:
            nlista = [xmin - factor, ymin - factor, xmax + factor, ymax + factor, puntoIIzquierdo[0], puntoIIzquierdo[1]]
            showTotal[valor][1] = nlista
            matrix_add = drawLinea(matriz, nminpoint, nmaxpoint)
            matrix_add = drawLinea(matrix_add, nminpoint, puntoIIzquierdo)
            matrix_add = drawLinea(matrix_add, nmaxpoint, puntoIIzquierdo)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif pointb[0]+factor == puntoSDerecho[0] and pointb[1]-factor==puntoSDerecho[1]:
            nlista = [xmin - factor, ymin - factor, xmax + factor, ymax + factor, puntoSDerecho[0], puntoSDerecho[1]]
            showTotal[valor][1] = nlista
            matrix_add = drawLinea(matriz, nminpoint, nmaxpoint)
            matrix_add = drawLinea(matrix_add, nminpoint, puntoSDerecho)
            matrix_add = drawLinea(matrix_add, nmaxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    else:
        if pointb[0] - factor == nminpoint[0] and pointb[1] - factor == nminpoint[1]:
            nlista = [xmin - factor, ymax + factor, xmax + factor, ymin - factor, nminpoint[0], nminpoint[1]]
            showTotal[valor][1] = nlista
            matrix_add = drawLinea(matriz, puntoIIzquierdo, puntoSDerecho)
            matrix_add = drawLinea(matrix_add, puntoIIzquierdo, nminpoint)
            matrix_add = drawLinea(matrix_add, puntoSDerecho, nminpoint)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif pointb[0] + factor == nmaxpoint[0] and pointb[1] + factor == nmaxpoint[1]:
            nlista = [xmin - factor, ymax + factor, xmax + factor, ymin - factor, nmaxpoint[0], nmaxpoint[1]]
            showTotal[valor][1] = nlista
            matrix_add = drawLinea(matriz, puntoIIzquierdo, puntoSDerecho)
            matrix_add = drawLinea(matrix_add, puntoIIzquierdo, nmaxpoint)
            matrix_add = drawLinea(matrix_add, puntoSDerecho, nmaxpoint)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    return matriz

def rotarTriangulo(matriz, point1, point2, pointb):
    xmin = min([point1[0], point2[0]])
    ymin = min([point1[1], point2[1]])
    minpoint = [xmin, ymin]
    xmax = max([point1[0], point2[0]])
    ymax = max([point1[1], point2[1]])
    maxpoint = [xmax, ymax]
    puntoSDerecho = [xmax, ymin]
    puntoIIzquierdo = [xmin, ymax]

    if pointb[0] == puntoIIzquierdo[0] and pointb[1] == puntoIIzquierdo[1]:
        if grados == 90:
            matrix_add = drawTriangulo(matriz,puntoIIzquierdo,maxpoint,puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados== 180:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados == 270:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, minpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados ==360:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoIIzquierdo)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    elif pointb[0] == maxpoint[0] and pointb[1] == maxpoint[1]:
        if grados == 90:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados== 180:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, minpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados == 270:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoIIzquierdo)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados ==360:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    elif pointb[0] == puntoSDerecho[0] and pointb[1] == puntoSDerecho[1]:
        if grados == 90:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, minpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados== 180:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoIIzquierdo)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados == 270:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados ==360:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    elif pointb[0] == minpoint[0] and pointb[1] == minpoint[1]:
        if grados == 90:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoIIzquierdo)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados== 180:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados == 270:
            matrix_add = drawTriangulo(matriz, minpoint, maxpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif grados ==360:
            matrix_add = drawTriangulo(matriz, puntoIIzquierdo, minpoint, puntoSDerecho)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
    else:
        print("error")
def deleteTriangulo(matriz, point1, point2, point3):
    matriz = deleteLinea(matriz, point1, point2)
    matriz = deleteLinea(matriz, point1, point3)
    matriz = deleteLinea(matriz, point2, point3)

    return matriz
def resetMatriz(matriz):
    for fila in matriz:
        for i in range(1, 21):
            fila[i] = " "

    return matriz


li = ["  ", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
      "19", "20", " "]
l1 = [" 1", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "1"]
l2 = [" 2", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "2"]
l3 = [" 3", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "3"]
l4 = [" 4", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "4"]
l5 = [" 5", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "5"]
l6 = [" 6", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "6"]
l7 = [" 7", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "7"]
l8 = [" 8", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "8"]
l9 = [" 9", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "9"]
l10 = ["10", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "10"]
l11 = ["11", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "11"]
l12 = ["12", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "12"]
l13 = ["13", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "13"]
l14 = ["14", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "14"]
l15 = ["15", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "15"]
l16 = ["16", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "16"]
l17 = ["17", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "17"]
l18 = ["18", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "18"]
l19 = ["19", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "19"]
l20 = ["20", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "20"]
lf = ["  ", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
      "19", "20", " "]

matriz = [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20]

print(" ".join(li))
printMatrix(matriz, 20, 22)
print(" ".join(lf))
showTotal = {}
contador = 1

while True:
    print("Opciones disponibles:")
    print("1. Agregar figura")
    print("2. Eliminar figura")
    print("3. Cambiar tamaño de figura")
    print("4. Rotar figura")
    print("5. Mostrar")
    print("6. Limpiar")
    print("7. Salir")

    option = int(input("Ingrese el número de la opción deseada: "))

    if option == 1:
        print("Figuras disponibles:")
        print("1. Rectangulo")
        print("2. Triangulo")
        print("3. Linea")
        print("4. Circulo")
        figure_option = int(input("Ingrese el número de la figura que desea agregar: "))
        coordenadas = []

        if figure_option == 1:
            operation = input("Ingresa las coordenadas (x1, y1), (x2, y2): ")

            lista1 = operation.split()
            listaInput = []

            for i in range(0, len(lista1)):
                numero = int(''.join(filter(str.isdigit, lista1[i])))
                listaInput.append(numero)
            point1 = [listaInput[0], listaInput[1]]
            point2 = [listaInput[2], listaInput[3]]

            coordenadas.append("Rectangulo")
            coordenadas.append([point1[0], point1[1], point2[0], point2[1]])

            matrix_add = drawCuadrado(matriz, point1, point2)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))

        elif figure_option == 2:
            operation = input("Ingrese las cordenadas del triángulo (x1, y1), (x2, y2), (x3, y3): ")

            lista1 = operation.split()
            listaInput = []

            for i in range(0, len(lista1)):
                numero = int(''.join(filter(str.isdigit, lista1[i])))
                listaInput.append(numero)
            point1 = [listaInput[0], listaInput[1]]
            point2 = [listaInput[2], listaInput[3]]
            point3 = [listaInput[4], listaInput[5]]

            coordenadas.append("Triangulo")
            coordenadas.append([point1[0], point1[1], point2[0], point2[1], point3[0], point3[1]])

            matrix_add = drawTriangulo(matriz, point1, point2, point3)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))

        elif figure_option == 3:
            operation = input("Ingresa las coordenadas de la linea (x1, y1), (x2, y2): ")

            lista1 = operation.split()
            listaInput = []

            for i in range(0, len(lista1)):
                numero = int(''.join(filter(str.isdigit, lista1[i])))
                listaInput.append(numero)

            point1 = [listaInput[0], listaInput[1]]
            point2 = [listaInput[2], listaInput[3]]

            coordenadas.append("Linea")
            coordenadas.append([point1[0], point1[1], point2[0], point2[1]])

            matrix_add = drawLinea(matriz, point1, point2)
            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))

        elif figure_option == 4:
            operation = input("Ingresa las coordenadas del centro del circulo (x, y): ")
            radio = int(input("Ingrese el radio: "))
            lista1 = operation.split()
            listaInput = []

            for i in range(0, len(lista1)):
                numero = int(''.join(filter(str.isdigit, lista1[i])))
                listaInput.append(numero)

            point = [listaInput[0], listaInput[1]]

            coordenadas.append("Circulo")
            coordenadas.append([point[0], point[1], radio])

            matrix_mod = drawCircle(matriz, point, radio)
            print(" ".join(li))
            printMatrix(matrix_mod, 20, 22)
            print(" ".join(lf))

        showTotal[contador] = coordenadas
        contador += 1

    elif option == 2:
        valor = int(input("Ingrese el N° de Figura: "))
        if showTotal[valor][0] == "Rectangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            matrix_add = deleteCuadrado(matriz, point1, point2)

            showTotal[valor] = ["Los datos del objeto han sido borrados"]

            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif showTotal[valor][0] == "Triangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            point3 = [showTotal[valor][1][4], showTotal[valor][1][5]]
            matrix_add = deleteTriangulo(matriz, point1, point2, point3)

            showTotal[valor] = ["Los datos del objeto han sido borrados"]

            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif showTotal[valor][0] == "Linea":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            matrix_add = deleteLinea(matriz, point1, point2)

            showTotal[valor] = ["Los datos del objeto han sido borrados"]

            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif showTotal[valor][0] == "Circulo":
            point = [showTotal[valor][1][0], showTotal[valor][1][1]]
            radio = showTotal[valor][1][2]
            matrix_mod = deleteCircle(matriz, point, radio)

            showTotal[valor] = ["Los datos del objeto han sido borrados"]

            print(" ".join(li))
            printMatrix(matrix_mod, 20, 22)
            print(" ".join(lf))

    elif option == 3:
        factor = int(input("Ingrese a cuanto agrandar la figura: "))
        valor = int(input("Ingrese el N° de Figura: "))
        if showTotal[valor][0] == "Rectangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            matrix_add = tamanoCuadrado(matriz, factor, point1, point2)
            deleteCuadrado(matriz, point1, point2)
            x1, y1 = point1[0], point1[1] - 1
            x2, y2 = point2[0], point2[1] - 1

            if x2 > x1 and y2 > y1:
                pMax_x = x2
                pMax_y = y2
                pMin_x = x1
                pMin_y = y1
            elif x2 > x1 and y1 > y2:
                pMax_x = x2
                pMax_y = y1
                pMin_x = x1
                pMin_y = y2
            elif x1 > x2 and y2 > y1:
                pMax_x = x1
                pMax_y = y2
                pMin_x = x2
                pMin_y = y1
            elif x1 > x2 and y1 > y2:
                pMax_x = x1
                pMax_y = y1
                pMin_x = x2
                pMin_y = y2
            else:
                print("error")

            pMax_x = pMax_x + factor - 1
            pMax_y = pMax_y + factor - 1

            pMin_x = pMin_x - (factor - 1)
            pMin_y = pMin_y - (factor - 1)

            nlista = [pMin_x, pMin_y + 1, pMax_x, pMax_y + 1]
            showTotal[valor][1] = nlista

            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))
        elif showTotal[valor][0] == "Triangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            point3 = [showTotal[valor][1][4], showTotal[valor][1][5]]
            d1 = distancia(point1, point2)
            d2 = distancia(point2, point3)
            d3 = distancia(point3, point1)
            deleteTriangulo(matriz, point1, point2, point3)
            if d1 == d2:
                matrix_add = agrandarTriangulo(matriz, factor, point1, point3, point2)
            elif d2 == d3:
                matrix_add = agrandarTriangulo(matriz, factor, point1, point2, point3)
            elif d1 == d3:
                matrix_add = agrandarTriangulo(matriz, factor, point2, point3, point1)
        elif showTotal[valor][0] == "Linea":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            matrix_add = agrandarLinea(matriz, factor, point1, point2)


        elif showTotal[valor][0] == "Circulo":
            point = [showTotal[valor][1][0], showTotal[valor][1][1]]
            radio = showTotal[valor][1][2]
            matrix_mod = drawCircle(matriz, point, radio + factor)
            deleteCircle(matriz, point, radio)
            nlista = radio + factor
            showTotal[valor][1][2] = nlista
            print(" ".join(li))
            printMatrix(matrix_mod, 20, 22)
            print(" ".join(lf))

    elif option == 4:
        grados = int(input("Ingrese los grados a rotar: "))
        valor = int(input("Ingrese el N° de Figura: "))
        if showTotal[valor][0] == "Rectangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            #deleteCuadrado(matriz, point1, point2)
            matrix_add = rotarCuadrado(matriz, grados, point1, point2)

            print(" ".join(li))
            printMatrix(matrix_add, 20, 22)
            print(" ".join(lf))

        elif showTotal[valor][0] == "Triangulo":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            point3 = [showTotal[valor][1][4], showTotal[valor][1][5]]
            d1 = distancia(point1, point2)
            d2 = distancia(point2, point3)
            d3 = distancia(point3, point1)
            deleteTriangulo(matriz, point1, point2, point3)
            if d1 == d2:
                matrix_add = rotarTriangulo(matriz, point1, point3, point2)
            elif d2 == d3:
                matrix_add = rotarTriangulo(matriz, point1, point2, point3)
            elif d1 == d3:
                matrix_add = rotarTriangulo(matriz, point2, point3, point1)
        elif showTotal[valor][0] == "Linea":
            point1 = [showTotal[valor][1][0], showTotal[valor][1][1]]
            point2 = [showTotal[valor][1][2], showTotal[valor][1][3]]
            xmin = min([point1[0], point2[0]])
            ymin = min([point1[1], point2[1]])
            minpoint = [xmin, ymin]
            xmax = max([point1[0], point2[0]])
            ymax = max([point1[1], point2[1]])
            maxpoint = [xmax, ymax]
            puntoSDerecho = [xmax, ymin]
            puntoIIzquierdo = [xmin, ymax]
            d= abs(point1[0] - point2[0])
            nd = int(d/2)
            d2 = abs(point1[1] - point2[1])
            nd2 = int(d2 / 2)
            if point1[1] == point2[1] and d%2 == 0 and (grados==90 or grados ==270):
                matrix_add = drawLinea(matriz,[xmin+nd, ymin-nd], [xmin+nd, ymin+nd])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[1] == point2[1] and d%2 == 0 and (grados==180 or grados ==360):
                matrix_add = drawLinea(matriz,[xmin, ymin], [xmin, ymin])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[1] == point2[1] and d%2 != 0 and (grados==90 or grados ==270):
                matrix_add = drawLinea(matriz,[xmin+nd, ymin-nd], [xmin+nd, ymin+nd+1])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[1] == point2[1] and d%2 != 0 and (grados==180 or grados ==360):
                matrix_add = drawLinea(matriz,[xmin, ymin], [xmin, ymin])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[0] == point2[0] and d2%2 == 0 and (grados==90 or grados ==270):
                matrix_add = drawLinea(matriz,[xmin-nd2, ymin+nd2], [xmin+nd2, ymin+nd2])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[0] == point2[0] and d2%2 == 0 and (grados==180 or grados ==360):
                matrix_add = drawLinea(matriz,[xmin, ymin], [xmin, ymin])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[0] == point2[0] and d2%2 != 0 and (grados==90 or grados ==270):
                matrix_add = drawLinea(matriz,[xmin-nd2, ymin+nd2], [xmin+nd2+1, ymin+nd2])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif point1[0] == point2[0] and d2%2 != 0 and (grados==180 or grados ==360):
                matrix_add = drawLinea(matriz,[xmin, ymin], [xmin, ymin])
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif grados == 90 or grados==270:
                matrix_add = drawLinea(matriz, puntoIIzquierdo, puntoSDerecho)
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))
            elif grados == 180 or grados == 360:
                matrix_add = drawLinea(matriz, minpoint, maxpoint)
                print(" ".join(li))
                printMatrix(matrix_add, 20, 22)
                print(" ".join(lf))

        elif showTotal[valor][0] == "Circulo":
            point = [showTotal[valor][1][0], showTotal[valor][1][1]]
            radio = showTotal[valor][1][2]
            matrix_mod = drawCircle(matriz, point, radio)
            print(" ".join(li))
            printMatrix(matrix_mod, 20, 22)
            print(" ".join(lf))
    elif option == 5:
        print()
        for clave, valor in showTotal.items():
            print("codigo: ", clave)
            print("figura: ", showTotal[clave][0])
            if showTotal[clave][0] == "Rectangulo":
                print("coordenadas: (", showTotal[clave][1][0], ", ", showTotal[clave][1][1], "), (",
                      showTotal[clave][1][2], ", ", showTotal[clave][1][3], ")")
            elif showTotal[clave][0] == "Triangulo":
                print("coordenadas: (", showTotal[clave][1][0], ", ", showTotal[clave][1][1], "), (",
                      showTotal[clave][1][2], ", ", showTotal[clave][1][3], "), (",
                      showTotal[clave][1][4], ", ", showTotal[clave][1][5], ")")
            elif showTotal[clave][0] == "Linea":
                print("coordenadas: (", showTotal[clave][1][0], ", ", showTotal[clave][1][1], "), (",
                      showTotal[clave][1][2], ", ", showTotal[clave][1][3], ")")
            elif showTotal[clave][0] == "Circulo":
                print("coordenadas del centro y radio: (", showTotal[clave][1][0], ", ", showTotal[clave][1][1], "), ",
                      showTotal[clave][1][2])
            print()
    elif option == 6:
        nmatriz = resetMatriz(matriz)
        showTotal.clear()
        print(" ".join(li))
        printMatrix(nmatriz, 20, 22)
        print(" ".join(lf))
    elif option == 7:
        break